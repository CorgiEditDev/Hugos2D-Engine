#include "Game.h"
hg::GameObject* paddle1 = nullptr;
hg::GameObject* paddle2 = nullptr;
hg::GameObject* ball = nullptr;
constexpr float ballSpeed = 0.05;
void Game::gameInit() {
	
	hg::texture tx;
	tx.load("Assets\\Ball.png");
	newGameObject("Ball", new hg::Sprite(10, 10, 100, 10, tx, 30));
	newGameObject("Paddle1", new hg::Rectangle(sf::Vector2f(10, 200), sf::Vector2f(0, 0), sf::Color::Red, false, 10));
	newGameObject("Paddle2", new hg::Rectangle(sf::Vector2f(10, 200), sf::Vector2f(1000, 0), sf::Color::Red, false, 10));

	paddle1 = getGameObject("Paddle1", hg::GameObject::Type::RectangleShape);
	paddle2 = getGameObject("Paddle2", hg::GameObject::Type::RectangleShape);
	ball = getGameObject("Ball", hg::GameObject::Type::Sprite);
	ball->getPhysics().velocity.x = -ballSpeed;
	display.setClearColor(sf::Color::Color(115, 115, 115));
}
void collision();
void Game::gameLoop(float delta) {
	//checkCollisionsFor(*ball,hg::GameObject::Type::Sprite);
	if (isKeyPressed(sf::Keyboard::W)) {
		paddle1->absMoveY(-10, deltaTime);
	}
	else if (isKeyPressed(sf::Keyboard::S)) {
		paddle1->absMoveY(10, deltaTime);
	}
	if (isKeyPressed(sf::Keyboard::Up)) {
		paddle2->absMoveY(-10, deltaTime);
	}
	else if (isKeyPressed(sf::Keyboard::Down)) {
		paddle2->absMoveY(10, deltaTime);
	}

	if (hg::Physics::checkCollision(ball->hitbox, paddle1->hitbox)) {
		ball->getPhysics().velocity.x = ballSpeed;
		collision();
	}
	else if (hg::Physics::checkCollision(ball->hitbox, paddle2->hitbox)) {
		ball->getPhysics().velocity.x = -ballSpeed;
		collision();
	}
	if (ball->getPosition().y < 0) {
		ball->getPhysics().velocity.y = 0.02;
	}
	if (ball->getPosition().y > 1000) {
		ball->getPhysics().velocity.y = -0.02;
	}
	if (paddle1->getPosition().y < 0) {
		paddle1->absMoveY(1,deltaTime);
	}
	else if (paddle1->getPosition().y > 1000) {
		paddle1->absMoveY(-1, deltaTime);
	}
	if (paddle2->getPosition().y < 0) {
		paddle2->absMoveY(1, deltaTime);
	}
	else if (paddle2->getPosition().y > 1000) {
		paddle2->absMoveY(-1, deltaTime);
	}


}

float rand_float(float mult) {
	if (rand() % 2) {
		return ballSpeed;
	}
	else {
		return -ballSpeed;
	}
}
void collision() {
	ball->getPhysics().velocity.y = (rand_float((ballSpeed)) - (ballSpeed / 2)) / 2;
}